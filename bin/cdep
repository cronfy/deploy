#!/usr/bin/env bash

SCRIPTPATH=$(readlink -f $0)
BASE_DIR="`dirname "$SCRIPTPATH"`/.."

function ver() {
    project_root="`findProjectRootAbove`"
    if [ "$?" != 0 ] ; then
        echo "project root not found" >&2
        return 1
    fi

    cd "$project_root"

    # http://stackoverflow.com/a/3278427/1775065
    git remote update

    LOCAL=$(git rev-parse @)
    REMOTE=$(git rev-parse @{u})
    BASE=$(git merge-base @ @{u})

    if [ $LOCAL = $REMOTE ]; then
        echo "Up-to-date"
    elif [ $LOCAL = $BASE ]; then
        echo "Need to pull"
    elif [ $REMOTE = $BASE ]; then
        echo "Need to push"
    else
        echo "Diverged"
    fi
}


function skel() {
    local target="$1"

    [ -z "$target" ] && [ ! -d "$target" ] && return 1 # fail

    SKEL="$BASE_DIR/src/cdep/skel"

    rsync -r --ignore-existing "$SKEL/" "$target/"

    cd $target
    
    mkdir -p deploy tmp log var

    [ ! -e public_html ] && [ ! -L public_html ] && ln -s deploy/current/web public_html
    [ ! -e project ]     && [ ! -L project ]     && ln -s deploy/current project

    true

}

function findProjectRootAbove() {
    local path="$PWD" c=0
    while [ "/" != "$path" ] ; do
#	[ -e "$path/.env" ] && head -n 5 "$path/.env" | grep -q PROJECT_TYPE=cdep && {
#            echo "$path"
#            return 0
#	}
#
#	[ -e "$path/project/.env" ] && head -n 5 "$path/project/.env" | grep -q PROJECT_TYPE=cdep && {
#            echo "$path/project"
#            return 0
#	}

	[ -e "$path/config/.env" ] && head -n 5 "$path/config/.env" | grep -q PROJECT_TYPE=cdep && {
            echo "$path/project"
            return 0
	}

        [ -d "$path/project" ] && [ -d "$path/config" ] && { [ -f "$path/config/app-config-local.php"  ] || [ -f "$path/config/.env" ]; }  && {
            echo "$path/project"
            return 0
        }

        c=$(($c + 1))
        [ 50 -lt "$c" ] && {
            echo "Too deep recursion." >&2
            return 1
        }

        path="`dirname "$path"`"
    done

    return 1
}

function getEnvDir() {
    local path="$PWD" c=0
    while [ "/" != "$path" ] ; do
	[ -e "$path/.env" ] && head -n 5 "$path/.env" | grep -q PROJECT_TYPE=cdep && {
            echo "$path"
            return 0
	}

	[ -e "$path/project/.env" ] && head -n 5 "$path/project/.env" | grep -q PROJECT_TYPE=cdep && {
            echo "$path/project"
            return 0
	}
        c=$(($c + 1))
        [ 50 -lt "$c" ] && {
            echo "Too deep recursion." >&2
            return 1
        }

        path="`dirname "$path"`"
    done

    return 1
}

function getMysqlArgsFromDotEnv() {
	local dotenv="$1"

	(
		. $dotenv
		echo "-u $DB_USER -h $DB_HOST -p$DB_PASS $DB_NAME"
	)
}

function getEnvPath() {
    env_dir="`getEnvDir`"
    if [ "$?" != 0 ] ; then
        echo "env dir not found" >&2
        return 1
    fi

    local env="$env_dir/.env"
    [ -e "$env" ] && echo "$env" && return 0
    return 1
}

function getMysqlArgs() {
    local project_root="$1"
    local config mysql_args
    local project_dir="`dirname "$project_root"`"

    config="`getEnvPath`"

    if [ -z "$config" ] ; then
        config="`find $project_dir/config -name '.env' -print -quit`"
    fi

    if [ -z "$config" ] ; then
        config="`find $project_root/../config  -name '.env' -print -quit`"
    fi

    if [ -z "$config" ] ; then
        config="`find $project_root/ -maxdepth 1 -mindepth 1 -name '.env' -print -quit`"
    fi

	if [ -n "$config" ] ; then
		mysql_args=`getMysqlArgsFromDotEnv $config`
		if [ "$?" = 0 ] ; then
			echo $mysql_args
			return 0
		fi
	fi

	config="`find $project_root/config  -name 'app-config-local.php' -print -quit`"

	[ -z "$config" ] && {
        config="`find $project_root/../config  -name 'app-config-local.php' -print -quit`"
	}

	[ -z "$config" ] && {
		return 1
	}

    mysql_args="`php "$BASE_DIR/bin/get-mysql-args.php" "$config"`"

	if [ "$?" != 0 ] ; then
		echo "Failed to get mysql settings from $config" >&2
		return 1
	fi

	echo "$mysql_args"
}

function my() {
    local project_root mysql_args

#    project_root="`findProjectRootAbove`"
#    if [ "$?" != 0 ] ; then
#        echo "project root not found" >&2
#        return 1
#    fi

    mysql_args="`getMysqlArgs "$project_root" `"
    if [ "$?" != 0 ] ; then
        echo "Failed to get mysql args" >&2
        return 1
    fi

    add_args="-s -t"
    if [ "$1" = "--" ] ; then
        shift
	add_args=""
    fi

    if [ "$1" = "=" ] ; then
	echo mysql $add_args $mysql_args "$@"
    else
	mysql $add_args $mysql_args "$@"
    fi
}

function myd() {
    local project_root mysql_args

    project_root="`findProjectRootAbove`"
    if [ "$?" != 0 ] ; then
        echo "project root not found" >&2
        return 1
    fi

    mysql_args="`getMysqlArgs "$project_root" `"
    if [ "$?" != 0 ] ; then
        echo "Failed to get mysql args" >&2
        return 1
    fi

    mysqldump $mysql_args "$@"
}

function initDep() {
	if [ -e "$HOME/bin/dep" ] ; then
		dep self-update
	else
		cd $HOME/bin
		wget -O dep http://deployer.org/releases/v3.3.0/deployer.phar
		chmod +x dep
	fi
}

function initComposerToken() {
	token="`composer config -g github-oauth.github.com`"
	[ -n "$token" ] && {
		echo "Token already installed, aborting."
		return 1
	}

	echo "\nGo to the link below and: "
	echo
	echo " 1. DISABLE ALL checkboxes (give no access)"
	echo " 2. Create a token and paste it below."
	echo
	echo "The link: https://github.com/settings/tokens/new?scopes=repo&description=Composer+for+${USER}@`hostname -f`+`date +%Y-%m-%d`"

	read -p "Token: " token
	[ -z "$token" ] && { echo "Aborted"; return 1; }

	echo "Installing token $token"
	composer config -g github-oauth.github.com "$token"
}

function initYii() {
	# http://www.yiiframework.com/doc-2.0/guide-start-installation.html#installing-via-composer
	# there - scroll down to "Installing Yii"
	composer global require "fxp/composer-asset-plugin:^1.2.0"
}

function initGit() {
	# http://stackoverflow.com/questions/13148066/warning-push-default-is-unset-its-implicit-value-is-changing-in-git-2-0
	git config --global push.default simple
}

function initBitbucket() {
	ssh bitbucket.org
}

function goToProject() {
    true
}

while [[ $# > 0 ]]
do
key="$1"

case $key in
    -V|--version)
	echo "Cdep local deploy tool v0.0.1"
        exit 0
    ;;
    ver)
	# compare repository version against origin
	# do we need to pull or push?
        shift
        ver "$@"
        exit $?
    ;;
    my|m)
        shift
        my "$@"
        exit $?
    ;;
    myd|md)
        shift
        myd "$@"
        exit $?
    ;;
    root)
        if findProjectRootAbove ; then
            exit 0
        else
            echo "Not found" >&2
            exit 1
        fi
    ;;
    init-dep)
	initDep
	exit $?
	;;
    init-yii)
	initYii
	exit $?
	;;
    init-git)
	initGit
	exit $?
	;;
    init-bitbucket)
	initBitbucket
	exit $?
	;;
    init-composer-token)
	# helps to install composer token
	initComposerToken
	exit $?
	;;
    skel)
        TARGET_DIR="$2"

        [ ! -d "$TARGET_DIR" ] && echo "Please specify target dir" >&2 && exit 1

        skel "$TARGET_DIR"

        status=$?
        [ 0 != $status ] && echo "Fail" >&2
        exit $status

        shift # past argument
    ;;
    *)
        if [ -e "$BASE_DIR/src/cdep/plugins/$key.sh" ] ; then
		. "$BASE_DIR/src/cdep/plugins/$key.sh"
		shift
		plugin "$@"
		exit $?
	fi
        echo "Unknown command" >&2
        exit 1
            # unknown option
    ;;
esac
shift # past argument or value
done


echo "Commands: skel my myd init-dep init-git init-bitbucket init-yii init-composer-token"
