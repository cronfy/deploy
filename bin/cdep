#!/usr/bin/env bash

SCRIPTPATH=$(readlink -f $0)
BASE_DIR="`dirname "$SCRIPTPATH"`/.."

function ver() {
    project_root="`findProjectRootAbove`"
    if [ "$?" != 0 ] ; then
        echo "project root not found" >&2
        return 1
    fi

    cd "$project_root"

    # http://stackoverflow.com/a/3278427/1775065
    git remote update

    LOCAL=$(git rev-parse @)
    REMOTE=$(git rev-parse @{u})
    BASE=$(git merge-base @ @{u})

    if [ $LOCAL = $REMOTE ]; then
        echo "Up-to-date"
    elif [ $LOCAL = $BASE ]; then
        echo "Need to pull"
    elif [ $REMOTE = $BASE ]; then
        echo "Need to push"
    else
        echo "Diverged"
    fi
}


function skel() {
    local target="$1"

    [ -z "$target" ] && [ ! -d "$target" ] && return 1 # fail

    SKEL="$BASE_DIR/src/cdep/skel"

    rsync -r --ignore-existing "$SKEL/" "$target/"

    cd $target
    
    mkdir -p deploy tmp log var

    [ ! -e public_html ] && [ ! -L public_html ] && ln -s deploy/current/web public_html
    [ ! -e project ]     && [ ! -L project ]     && ln -s deploy/current project

    true

}

function findProjectRootAbove() {
    local path="$PWD" c=0
    while [ "/" != "$path" ] ; do
        [ -L "$path/project" ] || [ -d "$path/project" ] && {
            echo "$path/project"
            return 0
        }

        c=$(($c + 1))
        [ 50 -lt "$c" ] && {
            echo "Too deep recursion." >&2
            return 1
        }

        path="`dirname "$path"`"
    done

    return 1
}

function getMysqlArgs() {
    local project_root="$1"
	local config mysql_args

	config="`find $project_root/config  -name 'app-config-local.php' -print -quit`"

	[ -z "$config" ] && {
        config="`find $project_root/../config  -name 'app-config-local.php' -print -quit`"
	}

	[ -z "$config" ] && {
		return 1
	}

    mysql_args="`php "$BASE_DIR/bin/get-mysql-args.php" "$config"`"

	if [ "$?" != 0 ] ; then
		echo "Failed to get mysql settings from $config" >&2
		return 1
	fi

	echo "$mysql_args"
}

function my() {
    local project_root mysql_args

    project_root="`findProjectRootAbove`"
    if [ "$?" != 0 ] ; then
        echo "project root not found" >&2
        return 1
    fi

    mysql_args="`getMysqlArgs "$project_root" `"
    if [ "$?" != 0 ] ; then
        echo "Failed to get mysql args" >&2
        return 1
    fi

    add_args="-s -t"
    if [ "$1" = "--" ] ; then
        shift
	add_args=""
    fi

    if [ "$1" = "=" ] ; then
	echo mysql $add_args $mysql_args "$@"
    else
	mysql $add_args $mysql_args "$@"
    fi
}

function myd() {
    local project_root mysql_args

    project_root="`findProjectRootAbove`"
    if [ "$?" != 0 ] ; then
        echo "project root not found" >&2
        return 1
    fi

    mysql_args="`getMysqlArgs "$project_root" `"
    if [ "$?" != 0 ] ; then
        echo "Failed to get mysql args" >&2
        return 1
    fi

    mysqldump $mysql_args "$@"
}

function initDep() {
	if [ -e "$HOME/bin/dep" ] ; then
		dep self-update
	else
		cd $HOME/bin
		wget -O dep http://deployer.org/deployer.phar
		chmod +x dep
	fi
}


while [[ $# > 0 ]]
do
key="$1"

case $key in
    ver)
        shift
        ver "$@"
        exit $?
    ;;
    my|m)
        shift
        my "$@"
        exit $?
    ;;
    myd|md)
        shift
        myd "$@"
        exit $?
    ;;
    root)
        if findProjectRootAbove ; then
            exit 0
        else
            echo "Not found" >&2
            exit 1
        fi
    ;;
    init-dep)
	initDep
	exit $?
	;;
    skel)
        TARGET_DIR="$2"

        [ ! -d "$TARGET_DIR" ] && echo "Please specify target dir" >&2 && exit 1

        skel "$TARGET_DIR"

        status=$?
        [ 0 != $status ] && echo "Fail" >&2
        exit $status

        shift # past argument
    ;;
    *)
        echo "Unknown command" >&2
        exit 1
            # unknown option
    ;;
esac
shift # past argument or value
done


echo "Commands: skel my myd"
